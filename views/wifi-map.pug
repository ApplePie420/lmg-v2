extends layout

block layout-content
    div.Header
        nav.navbar.navbar-light.bg-light
            a.navbar-brand(href="/user") Home                        
            form.form-inline(action="/logout", method="GET")
                .form-group.mx-sm-3.mb-3
                    h4.nav-item
                        a(href="/editUser") #{username}
                .form-group.mx-sm-3.mb-3
                        a(href="/changePFP")
                            img(src="/image/" + `${pfp}` style="border-radius: 50%" width="48" height="48")     
                .form-group.mx-sm-3.mb-3
                    button.btn.btn-danger(type="submit") Log Out
                    
    .Content
        #map(style="width: 100%; height: 700px;")
        link(rel='stylesheet', href='https://unpkg.com/leaflet@1.6.0/dist/leaflet.css', integrity='sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==', crossorigin='')
        script(src='https://unpkg.com/leaflet@1.6.0/dist/leaflet.js', integrity='sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==', crossorigin='')
        script(src="/js/leaflet.markercluster-src.js" crossorigin="")
        link(rel='stylesheet', href='/css/MarkerCluster.Default.css' crossorigin="")
        link(rel='stylesheet', href='/css/MarkerCluster.css' )
        script.
            var mymap = L.map('map', {renderer: L.canvas()}).locate({setView: true, maxZoom: 14});

            const templateCluster = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });
            
            var baseLayer = L.tileLayer("https://api.mapbox.com/styles/v1/mapbox/outdoors-v10/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibjN0dHgiLCJhIjoiY2thdjV6ZHk0MDhtazMzcGNoYTl1cHUwYyJ9.zah7JmDF59WE2UQOcdq98w", {attribution: "Mapbox", id: 'mapbox/streets-v11', maxZoom: 18, minZoom: 2}).addTo(mymap);
            var markers = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });

            var UPCmarkers = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });

            var czechballCluster = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });
            var cvoltonCluster = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });
            var nettCluster = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });
            var grapfieldCluster = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });
            var bodaxCluster = L.markerClusterGroup({
                maxClusterRadius: 250,
                removeOutsideVisibleBounds: true,
                spiderifyOnMaxZoom: false,
                disableClusteringAtZoom: 16
            });

            var dbJSON = !{JSON.stringify(dbData)};
            var colors = !{JSON.stringify(usersFound)};
            var counter = !{0};

            for(var i = 0; i < dbJSON.length; i++) {
                var author = dbJSON[i].author;

                var color = colors.find(user => user.username === author).marker_color;

                var dateT = new Date(dbJSON[i].timestamp);
                
                var marker = L.circleMarker([dbJSON[i].position[0], dbJSON[i].position[1]], {
                    color: color,
                    weight: 2,
                    radius: 7,
                    opacity: 0.8
                    });
                
                marker.bindPopup("<b>SSID: </b>" + dbJSON[i].SSID + "<br>" +
                                "<b>MAC: </b>" + dbJSON[i].MAC + "<br>" +
                                "<b>Pass: </b>" + dbJSON[i].password + "<br>" +
                                "<b>Added on: </b>" + !{moment(dateT).format("'DD.MM.YYYY HH:mm'")} + "<br>" +
                                "<a href='https://wigle.net/search?netid=" + dbJSON[i].MAC + "' target='_blank' data-toggle='tooltip' data-placement='top' title='You have to be logged in WiGLE to use this function.'>More info...</a>");

                
                if(dbJSON[i].author == "Czechball") {
                    czechballCluster.addLayer(marker);
                } else if(dbJSON[i].author == "Cvolton") {
                    cvoltonCluster.addLayer(marker);
                } else if(dbJSON[i].author == "Bodax") {
                    bodaxCluster.addLayer(marker);
                } else if(dbJSON[i].author == "N3ttX") {
                    nettCluster.addLayer(marker);
                } else if(dbJSON[i].author == "Grapfield") {
                    grapfieldCluster.addLayer(marker);
                }
                else {
                    markers.addLayer(marker);
                }
            }
            mymap.addLayer(markers);

            mymap.addLayer(czechballCluster);
            mymap.addLayer(cvoltonCluster);
            mymap.addLayer(bodaxCluster);
            mymap.addLayer(nettCluster);
            mymap.addLayer(grapfieldCluster);

            var baseL = {
                "Base Layer": baseLayer
            };

            var overlays = {
                "Czechball": czechballCluster,
                "Cvolton": cvoltonCluster,
                "N3ttX": nettCluster,
                "Grapfield": grapfieldCluster,
                "Bodax": bodaxCluster
            };

            L.control.layers(baseL, overlays).addTo(mymap);
            
            
            function sortWifis() {
                var input, filter, data, list, li, i, txtValue;
                input = document.getElementById("searchInput");
                filter = input.value.toUpperCase();
                list = document.getElementById("wifiList");
                li = list.getElementsByTagName("li");

                for(i = 0; i < li.length; i++) {
                    data = li[i].getElementsByTagName("a")[0];
                    txtValue = data.textContent || data.innerText;
                    
                    if(txtValue.toUpperCase().indexOf(filter) > -1) {
                        data.parentElement.style.display = "";
                    } else {
                        data.parentElement.style.display = "none";
                    }
                }
            }

            function centerMapOnWifi(ssid, lat, lng) {
                mymap.flyTo(new L.LatLng(lat, lng), 17, {animate: true, duration: 0.75});
            }

            //TODO: checkbox to filter out all UPC wifis
            function disableUPC() {
                
            }

        .container
            .row(style="margin: 10px")
                .col-sm
                    ul.list-group(style="width:100%")
                        each element in usersFound
                            li.list-group-item.d-flex.justify-content-between.align-items-center
                                | #{element.username} found
                                span.badge.badge-pill(style="color: white; background-color:" + element.marker_color) #{element.found}
                        li.list-group-item.d-flex.justify-content-between.align-items-center
                            | Results total
                            span.badge.badge-light.badge-pill #{dbData.length}
                        li.list-group-item.d-flex.justify-content-between.align-items-center
                            | UPC WiFis
                            span.badge.badge-light.badge-pill #{stringify(UPCcounter)}
                        li.list-group-item.d-flex.justify-content-between.align-items-center
                            | Last added on
                            span.badge.badge-light.badge-pill #{moment(lastDate).utcOffset(0).format("DD/MM/YYYY HH:mm")}
                .col-sm
                    input(type="text", class="form-control", id="searchInput", onkeyup="sortWifis()", placeholder="Filter SSIDs..." autocomplete="off", style="width: 100%")
                    ul.list-group(style="width:100%; height: 350px; overflow: auto", id="wifiList")
                        each wifi in dbData
                            li.list-group-item
                                a(onclick="centerMapOnWifi('" + String(wifi.SSID) + "'," + wifi.position[0] + "," + wifi.position[1] + ")")
                                    u SSID:
                                    b  #{wifi.SSID} 
                                    br
                                    u MAC:
                                    i(style="font-family: consolas; font-weight: light")  #{wifi.MAC}
                                    br
                                    u PSK:
                                    i  #{wifi.password}